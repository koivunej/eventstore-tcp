var searchIndex = {};
searchIndex["eventstore_tcp"] = {"doc":"Tokio-based EventStore client library in it's early stages. Currently the most interesting API is the `tokio_service::service::Service` implemented by `client::Client`, which allows sending values of `Package` to get back a `Future` of a response `Package`. `Package` is the name for a frame in the protocol. See it's documentation for more information.","items":[[3,"WriteEvents","eventstore_tcp","",null,null],[12,"event_stream_id","","",0,null],[12,"expected_version","","",0,null],[12,"events","","",0,null],[12,"require_master","","",0,null],[3,"ResolvedIndexedEvent","","",null,null],[12,"event","","",1,null],[12,"link","","",1,null],[3,"EventRecord","","",null,null],[12,"event_stream_id","","",2,null],[12,"event_number","","",2,null],[12,"event_id","","",2,null],[12,"event_type","","",2,null],[12,"data_content_type","","",2,null],[12,"metadata_content_type","","",2,null],[12,"data","","",2,null],[12,"metadata","","",2,null],[12,"created","","",2,null],[12,"created_epoch","","",2,null],[3,"ReadAllEvents","","",null,null],[12,"commit_position","","",3,null],[12,"prepare_position","","",3,null],[12,"max_count","","",3,null],[12,"resolve_link_tos","","",3,null],[12,"require_master","","",3,null],[3,"MasterInfo","","",null,null],[12,"external_tcp_address","","",4,null],[12,"external_tcp_port","","",4,null],[12,"external_http_address","","",4,null],[12,"external_http_port","","",4,null],[12,"external_secure_tcp_address","","",4,null],[12,"external_secure_tcp_port","","",4,null],[3,"WriteEventsCompleted","","Successful response to `Message::WriteEvents`",null,null],[12,"event_numbers","","The event number range assigned to the written events",5,null],[12,"prepare_position","","Position for `$all` query for one of the written events, perhaps the first?",5,null],[12,"commit_position","","These can be used to locate last written event from the `$all` stream",5,null],[3,"ReadStreamCompleted","","Successful response to a `Message::ReadStreamEvents`.",null,null],[12,"events","","The actual events returned by the server. Subject to `resolve_link_tos` setting on the read request.",6,null],[12,"next_page","","`EventNumber` for a query for the next page in the same direction, `None` if start has been reached when reading backwards. When reading forwards, this will never be `None` as new events might have appeared while receiving this response.",6,null],[12,"last_event_number","","Event number of the last event",6,null],[12,"end_of_stream","","Has the end of the stream been reached (or could more events be read immediatedly)",6,null],[12,"last_commit_position","","Last commit position of the last event. Not public as there is currently no type for an positive i64 (0 < x < i64). Also, not sure how to explain the use of this property.",6,null],[3,"ReadAllCompleted","","Successful response to `Message::ReadAllEvents`.",null,null],[12,"commit_position","","Position of the commit of the current prepare",7,null],[12,"prepare_position","","Position of the current prepare",7,null],[12,"events","","The read events, with position metadata",7,null],[12,"next_commit_position","","For paging: next commit position",7,null],[12,"next_prepare_position","","For paging: next prepare position",7,null],[3,"Package","","Frame in the protocol. On the wire, packets are embedded in frames with length prefix and suffix.",null,null],[12,"authentication","","Possible authentication data included in the packet. `Some` and `None` values of this will be used to generate corresponding `TcpFlags` first bit.",8,null],[12,"correlation_id","","Before sending an request to the server client generates a new random UUID using `uuid::Uuid::new_v4()` and later server will respond using the same `correlation_id`.",8,null],[12,"message","","Enumeration of possible messages.",8,null],[3,"EventStoreClient","","`tokio_service::Service` implementation of the client.",null,null],[3,"UsernamePassword","","Username and password authentication token embedded in requests as there is no concept of session in the TCP protocol, every request must be authenticated.",null,null],[3,"StreamVersion","","`StreamVersion` represents the valid values for a stream version which is the same as the event number of the latest event. As such, values are non-negative integers up to `i32::max_value`. Negative values of `i32` have special meaning in the protocol, and are restricted from being used with this type.",null,null],[4,"NotHandledReason","","",null,null],[13,"NotReady","","",9,null],[13,"TooBusy","","",9,null],[13,"NotMaster","","",9,null],[4,"WriteEventsFailure","","Like `OperationResult` on the wire but does not have a success value. Explains the reason for failure.",null,null],[13,"PrepareTimeout","","Server failed to process the request before timeout",10,null],[13,"CommitTimeout","","Server timed out while awaiting commit to be processed",10,null],[13,"ForwardTimeout","","Server timed out while awaiting for a forwarded request to complete",10,null],[13,"WrongExpectedVersion","","Optimistic locking failure; stream version was not the expected",10,null],[13,"StreamDeleted","","Stream has been deleted",10,null],[13,"AccessDenied","","No authentication provided or insufficient permissions to a stream",10,null],[4,"ReadEventError","","`ReadEventError` maps to non-success of `ReadEventResult`",null,null],[13,"NotFound","","Event of requested number was not found (scavenged or never existed)",11,null],[13,"NoStream","","No such stream",11,null],[13,"StreamDeleted","","Stream has been deleted",11,null],[13,"Error","","Other error",11,null],[13,"AccessDenied","","Access was denied (no credentials provided or insufficient permissions)",11,null],[4,"ReadStreamError","","Non-success projection of the `ReadStreamResult` enum on the wire representing a failed `ReadStreamCompleted` request.",null,null],[13,"NoStream","","Stream was not found",12,null],[13,"StreamDeleted","","Stream has been deleted",12,null],[13,"NotModified","","Unknown when this happens: it is not retuned when reading past the last event in a stream forwards.",12,null],[13,"Error","","Other error",12,null],[13,"AccessDenied","","Access was denied (no credentials provided or insufficient permissions)",12,null],[4,"ReadAllError","","Failure cases of wire enum `ReadAllResult`.",null,null],[13,"NotModified","","Unknown when this happens,",13,null],[13,"Error","","Other error",13,null],[13,"AccessDenied","","Access was denied (no credentials provided or insufficient permissions)",13,null],[4,"ReadDirection","","The direction in which events are read.",null,null],[13,"Forward","","Read from first (event 0) to the latest",14,null],[13,"Backward","","Read from latest (highest event number) to the first (event 0)",14,null],[4,"ExpectedVersion","","`ExpectedVersion` represents the different modes of optimistic locking when writing to a stream using `WriteEventsBuilder`.",null,null],[13,"Any","","No optimistic locking",15,null],[13,"NewStream","","Expect a stream not to exist",15,null],[13,"Exact","","Expect exact number of events in the stream",15,null],[4,"EventNumber","","`EventNumber` is similar to `StreamVersion` and `ExpectedVersion` but is used when specifying a position to read from in the stream. Allows specifying the first or last (when reading backwards) event in addition to exact event number.",null,null],[13,"First","","The first event in a stream",16,null],[13,"Exact","","Exactly the given event number",16,null],[13,"Last","","The last event in a stream",16,null],[4,"ContentType","","Content type of the event `data` or `metadata`.",null,null],[13,"Bytes","","Raw bytes",17,null],[13,"Json","","JSON values usable with projections in EventStore",17,null],[4,"LogPosition","","Global unique position in the EventStore, used when reading all events. Range -1..i64::max_value()",null,null],[13,"First","","The first event ever",18,null],[13,"Exact","","Exact position",18,null],[13,"Last","","The last event written to the database at the moment",18,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"masterinfo"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"masterinfo"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"masterinfo"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"masterinfo"}}],[11,"from_reader","","",4,null],[11,"get_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_message","","",4,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"nothandledreason"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"nothandledreason"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"eventrecord"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"eventrecord"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"eventrecord"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"eventrecord"}}],[11,"from_reader","","",2,null],[11,"get_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_message","","",2,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"resolvedindexedevent"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"resolvedindexedevent"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"resolvedindexedevent"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"resolvedindexedevent"}}],[11,"from_reader","","",1,null],[11,"get_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_message","","",1,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"writeevents"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"writeevents"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"writeevents"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"writeevents"}}],[11,"from_reader","","",0,null],[11,"get_size","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_message","","",0,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"readallevents"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"readallevents"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"readallevents"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"readallevents"}}],[11,"from_reader","","",3,null],[11,"get_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_message","","",3,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"name":"result"}}],[0,"raw","","Raw module contains the enumeration `RawMessage` and raw decoding and encoding functionality. There should not be need to handle `RawMessage` values directly but if there is ever a bug, using the raw messages should still work.",null,null],[3,"NotAuthenticatedPayload","eventstore_tcp::raw","Newtype for an arbitary NotAuthenticated \"info\", which could be UTF8 string.",null,null],[3,"BadRequestPayload","","Newtype for an arbitary BadRequest \"info\", which could be UTF8 string.",null,null],[4,"RawMessage","","Enumeration much like the `adapted::AdaptedMessage` for all the messages in the protocol.",null,null],[13,"HeartbeatRequest","","Requests heartbeat from the other side. Unsure if clients or server sends these.",19,null],[13,"HeartbeatResponse","","Response to a heartbeat request.",19,null],[13,"Ping","","Ping request, similar to heartbeat.",19,null],[13,"Pong","","Ping response.",19,null],[13,"WriteEvents","","Append to stream request",19,null],[13,"WriteEventsCompleted","","Append to stream response, which can fail for a number of reasons",19,null],[13,"ReadEvent","","Request to read a single event from a stream",19,null],[13,"ReadEventCompleted","","Response to a single event read",19,null],[13,"ReadStreamEvents","","Request to read a stream from a point forward or backward",19,null],[13,"ReadStreamEventsCompleted","","Response to a stream read in given direction",19,null],[13,"ReadAllEvents","","Request to read a stream of all events from a position forward or backward",19,null],[13,"ReadAllEventsCompleted","","Response to a read all in given direction",19,null],[13,"BadRequest","","Request was not understood. Please open an issue!",19,null],[13,"NotHandled","","Correlated request was not handled. This is the likely response to requests where `require_master` is `true`, but the connected endpoint is not master and cannot reach it.",19,null],[13,"Authenticate","","Request to authenticate attached credentials.",19,null],[13,"Authenticated","","Positive authentication response. The credentials used to `Authenticate` previously can be used in successive requests.",19,null],[13,"NotAuthenticated","","Negative authentication response, or response to any sent request for which used authentication was not accepted. May contain a reason.",19,null],[13,"Unsupported","","Placeholder for a discriminator and the undecoded bytes",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"rawmessage"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"notauthenticatedpayload"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"notauthenticatedpayload"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"notauthenticatedpayload"}}],[11,"as_ref","","",20,null],[11,"from","","",20,{"inputs":[{"name":"cow"}],"output":{"name":"notauthenticatedpayload"}}],[11,"into","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"badrequestpayload"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"badrequestpayload"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"badrequestpayload"}}],[11,"as_ref","","",21,null],[11,"from","","",21,{"inputs":[{"name":"cow"}],"output":{"name":"badrequestpayload"}}],[11,"into","","",21,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"from","","",19,{"inputs":[{"name":"badrequestpayload"}],"output":{"name":"rawmessage"}}],[11,"from","","",19,{"inputs":[{"name":"notauthenticatedpayload"}],"output":{"name":"rawmessage"}}],[11,"from","","",19,{"inputs":[{"name":"writeevents"}],"output":{"name":"rawmessage"}}],[11,"from","","",19,{"inputs":[{"name":"writeeventscompleted"}],"output":{"name":"rawmessage"}}],[11,"from","","",19,{"inputs":[{"name":"readevent"}],"output":{"name":"rawmessage"}}],[11,"from","","",19,{"inputs":[{"name":"readeventcompleted"}],"output":{"name":"rawmessage"}}],[11,"from","","",19,{"inputs":[{"name":"nothandled"}],"output":{"name":"rawmessage"}}],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"from","","",19,null],[11,"into_owned","","Turns possibly borrowed value of `self` into one that owns all of it's data.",19,{"inputs":[{"name":"self"}],"output":{"name":"rawmessage"}}],[11,"decode","","Decodes the message from the buffer without any cloning.",19,null],[11,"encode","","Encodes the message into the given writer.",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"discriminator","","Returns the protocol discriminator value for the variant",19,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[0,"adapted","eventstore_tcp","Adapted or refined types providing a much more oxidized API for handling the messages in the protocol.",null,null],[3,"NotHandledInfo","eventstore_tcp::adapted","Placeholder for NotHandledInfo, unused.",null,null],[3,"BadRequestMessage","","Newtype for wrapping a specific message, AdaptedMessage::BadRequest",null,null],[3,"NotAuthenticatedMessage","","Newtype for wrapping a specific message, AdaptedMessage::NotAuthenticated",null,null],[4,"AdaptedMessage","","Enumeration of converted messages for more oxidized API.",null,null],[13,"HeartbeatRequest","","Requests heartbeat from the other side. Unsure if clients or server sends these.",22,null],[13,"HeartbeatResponse","","Response to a heartbeat request.",22,null],[13,"Ping","","Ping request, similar to heartbeat.",22,null],[13,"Pong","","Ping response.",22,null],[13,"WriteEvents","","Append to stream request",22,null],[13,"WriteEventsCompleted","","Append to stream response, which can fail for a number of reasons",22,null],[13,"ReadEvent","","Request to read a single event from a stream",22,null],[13,"ReadEventCompleted","","Response to a single event read",22,null],[13,"ReadStreamEvents","","Request to read a stream from a point forward or backward",22,null],[13,"ReadStreamEventsCompleted","","Response to a stream read in given direction",22,null],[13,"ReadAllEvents","","Request to read a stream of all events from a position forward or backward",22,null],[13,"ReadAllEventsCompleted","","Response to a read all in given direction",22,null],[13,"BadRequest","","Request was not understood. Please open an issue!",22,null],[13,"NotHandled","","Correlated request was not handled. This is the likely response to requests where `require_master` is `true`, but the connected endpoint is not master and cannot reach it.",22,null],[13,"Authenticate","","Request to authenticate attached credentials.",22,null],[13,"Authenticated","","Positive authentication response. The credentials used to `Authenticate` previously can be used in successive requests.",22,null],[13,"NotAuthenticated","","Negative authentication response, or response to any sent request for which used authentication was not accepted.",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"adaptedmessage"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"adaptedmessage"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"adaptedmessage"}}],[11,"as_raw","","Converts the adapted back to raw for encoding.",22,{"inputs":[{"name":"self"}],"output":{"name":"rawmessage"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"nothandledinfo"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"nothandledinfo"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nothandledinfo"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"badrequestmessage"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"badrequestmessage"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"badrequestmessage"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",24,{"inputs":[{"name":"cow"}],"output":{"name":"badrequestmessage"}}],[11,"into","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"from","","",22,{"inputs":[{"name":"badrequestmessage"}],"output":{"name":"adaptedmessage"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"notauthenticatedmessage"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"notauthenticatedmessage"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"notauthenticatedmessage"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",25,{"inputs":[{"name":"cow"}],"output":{"name":"notauthenticatedmessage"}}],[11,"into","","",25,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"from","","",22,{"inputs":[{"name":"notauthenticatedmessage"}],"output":{"name":"adaptedmessage"}}],[11,"fmt","eventstore_tcp","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"writeeventscompleted"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"writeeventscompleted"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"writeeventscompleted"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"writeeventsfailure"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"writeeventsfailure"}],"output":{"name":"bool"}}],[11,"is_transient","","Return `true` if the operation failed in a transient way that might be resolved by retrying.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",10,{"inputs":[{"name":"operationresult"}],"output":{"name":"self"}}],[11,"into","","",10,{"inputs":[{"name":"self"}],"output":{"name":"operationresult"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"readeventerror"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"readeventerror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"readeventerror"}],"output":{"name":"bool"}}],[11,"from","","",11,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"readstreamcompleted"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"readstreamcompleted"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"readstreamcompleted"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"readstreamerror"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"readstreamerror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"readstreamerror"}],"output":{"name":"bool"}}],[11,"from","","",12,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"readallcompleted"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"readallcompleted"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"readallcompleted"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"readallerror"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"readallerror"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"readallerror"}],"output":{"name":"bool"}}],[11,"from","","",13,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"package"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"package"}],"output":{"name":"bool"}}],[11,"connect","","Connect to an EventStore database listening at given `addr` using the given `tokio::reactor::Core`s `handle`. Returns a future representing the client which can be used to send and receive `Package` values.",26,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"box"}}],[11,"call","","",26,null],[0,"builder","","Builders to help building requests.",null,null],[3,"Builder","eventstore_tcp::builder","Factory factory for creating builders.",null,null],[3,"SimpleBuilder","","Builder for messages without any additional contents.",null,null],[3,"WriteEventsBuilder","","Builder for `WriteEvents` which allows writing multiple events to a stream.",null,null],[3,"NewEventBuilder","","Builder for specifying an event when using `WriteEventsBuilder`.",null,null],[3,"ReadEventBuilder","","Builder for a single event read request `ReadEvent`.",null,null],[3,"ReadStreamEventsBuilder","","Builds a package for reading multiple events from a stream in either `ReadDirection`.",null,null],[3,"ReadAllEventsBuilder","","Builder for `ReadAllEvents`.",null,null],[11,"ping","","Simple builder for a Ping message, that has no other data.",27,{"inputs":[],"output":{"name":"simplebuilder"}}],[11,"authenticate","","Simple builder for an Authenticate message, that has no other data (credentials are passed to the `build_package` method).",27,{"inputs":[],"output":{"name":"simplebuilder"}}],[11,"write_events","","Builder for `WriteEvents`, which allows writing multiple events to a stream, with expected current version of the stream.",27,{"inputs":[],"output":{"name":"writeeventsbuilder"}}],[11,"read_event","","Builder for `ReadEvent` which allows reading a single event off a stream.",27,{"inputs":[],"output":{"name":"readeventbuilder"}}],[11,"read_stream_events","","Builder for `ReadStreamEvents` which allows reading multiple events off a stream either forwards or backwards.",27,{"inputs":[],"output":{"name":"readstreameventsbuilder"}}],[11,"read_all_events","","Builder for `ReadAllEevents` which allows reading off a stream of all events in the database.",27,{"inputs":[],"output":{"name":"readalleventsbuilder"}}],[11,"build_package","","Returns a package which can be sent through `EventStoreClient::call` method.",28,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"package"}}],[11,"stream_id","","Panics if the id is an empty string",29,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"expected_version","","Sets the expected version of the stream as an optimistic locking mechanism.",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[11,"require_master","","Should the server only handle the request if it is the cluster master. Note that while only the master server can accept writes, other cluster members can forward requests to the master.",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"new_event","","Start creating a new event using `NewEventBuilder`.",29,{"inputs":[{"name":"self"}],"output":{"name":"neweventbuilder"}}],[11,"build_package","","Build a package. Will panic if required values are not set. Values of this builder will be moved into the package.",29,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"package"}}],[11,"event_id","","Sets the event identifier. If not specified a new random Uuid will be generated.",30,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"self"}}],[11,"event_type","","Specifies the event type.",30,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"data","","Sets the data of the event.",30,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"data_content_type","","Sets the content type of the event, defaults to `ContentType::Bytes`",30,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"self"}}],[11,"metadata","","Sets the metadata of the event.",30,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"metadata_content_type","","Sets the content type of the event, defaults to `ContentType::Bytes`",30,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"self"}}],[11,"done","","Completes building a new event for `WriteEventsBuilder` by adding a new event to the builder and returning it.",30,{"inputs":[{"name":"self"}],"output":{"name":"writeeventsbuilder"}}],[11,"cancel","","Cancels building this new event returning the `WriteEventsBuilder` unmodified.",30,{"inputs":[{"name":"self"}],"output":{"name":"writeeventsbuilder"}}],[11,"stream_id","","Panics if the id is an empty string",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"event_number","","Event number to be read.",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"resolve_link_tos","","Whether or not the server should resolve links found in the stream to events of other streams. Defaults to `true`.",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_master","","Should the server only handle the request if it is the cluster master. Master server is the only one which can accept writes, so reading from other members than master can result in some specific event not yet being replicated and thus not found.",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"build_package","","Build a package. Will panic if required values are not set. Values of this builder will be moved into the package.",31,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"package"}}],[11,"direction","","Set the read direction (required).",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"max_count","","Sets the maximum number of events to read (required). Panics if argument is zero. `u8` is used as larger batches should be paged. At the moment maximum buffer requirement even for 255 events is 255*16MiB > 4000MB.",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"stream_id","","Sets the stream to read from. Panics if the id is an empty string. Required.",32,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"from_event_number","","Event number to read from to the given direction.",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"resolve_link_tos","","Whether or not the server should resolve links found in the stream to events of other streams. Defaults to `true`.",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_master","","Should the server only handle the request if it is the cluster master. Master server is the only one which can accept writes, so reading from other members than master can result in some specific event not yet being replicated and thus not found.",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"build_package","","Build a package. Will panic if required values are not set. Values of this builder will be moved into the package.",32,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"package"}}],[11,"direction","","Set the read direction (required).",33,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"positions","","Sets the positions to read from. These are easiest to acquire from previous ReadAllSuccess responses, likely persisted somewhere between reads.",33,{"inputs":[{"name":"self"},{"name":"n"},{"name":"m"}],"output":{"name":"self"}}],[11,"max_count","","Sets the maximum number of events to read (required). Panics if argument is zero. `u8` is used as larger batches should be paged. At the moment maximum buffer requirement even for 255 events is 255*16MiB > 4000MB.",33,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"resolve_link_tos","","Whether or not the server should resolve links found in the stream to events of other streams. Defaults to `true`.",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_master","","Should the server only handle the request if it is the cluster master. Master server is the only one which can accept writes, so reading from other members than master can result in some specific event not yet being replicated and thus not found.",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"build_package","","Build a package. Will panic if required values are not set. Values of this builder will be moved into the package.",33,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"package"}}],[11,"clone","eventstore_tcp","",34,{"inputs":[{"name":"self"}],"output":{"name":"usernamepassword"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"usernamepassword"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"usernamepassword"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new value",34,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"usernamepassword"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"readdirection"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"readdirection"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"expectedversion"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"expectedversion"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"expectedversion"}],"output":{"name":"bool"}}],[11,"into","","Returns the wire representation.",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from","","",15,{"inputs":[{"name":"streamversion"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"streamversion"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"streamversion"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"streamversion"}],"output":{"name":"bool"}}],[11,"from","","Converts the value to a StreamVersion or panics if the value is out of range",35,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from_opt","","Converts the value to a StreamVersion returning None if the input is out of range.",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"into","","Returns the wire representation.",35,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"eventnumber"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"eventnumber"}],"output":{"name":"bool"}}],[11,"from","","",16,{"inputs":[{"name":"streamversion"}],"output":{"name":"self"}}],[11,"into","","Returns the wire representation.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"into","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"logposition"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"logposition"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"logposition"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"logposition"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"logposition"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"logposition"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"logposition"}],"output":{"name":"ordering"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"logposition"}],"output":{"name":"bool"}}],[11,"from","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"logposition"}}],[11,"into","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from_opt","","Wraps the value into LogPosition or None, if it is larger than i64",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"WriteEvents"],[3,"ResolvedIndexedEvent"],[3,"EventRecord"],[3,"ReadAllEvents"],[3,"MasterInfo"],[3,"WriteEventsCompleted"],[3,"ReadStreamCompleted"],[3,"ReadAllCompleted"],[3,"Package"],[4,"NotHandledReason"],[4,"WriteEventsFailure"],[4,"ReadEventError"],[4,"ReadStreamError"],[4,"ReadAllError"],[4,"ReadDirection"],[4,"ExpectedVersion"],[4,"EventNumber"],[4,"ContentType"],[4,"LogPosition"],[4,"RawMessage"],[3,"NotAuthenticatedPayload"],[3,"BadRequestPayload"],[4,"AdaptedMessage"],[3,"NotHandledInfo"],[3,"BadRequestMessage"],[3,"NotAuthenticatedMessage"],[3,"EventStoreClient"],[3,"Builder"],[3,"SimpleBuilder"],[3,"WriteEventsBuilder"],[3,"NewEventBuilder"],[3,"ReadEventBuilder"],[3,"ReadStreamEventsBuilder"],[3,"ReadAllEventsBuilder"],[3,"UsernamePassword"],[3,"StreamVersion"]]};
initSearch(searchIndex);
